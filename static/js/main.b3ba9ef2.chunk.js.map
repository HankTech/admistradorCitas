{"version":3,"sources":["Components/Header.js","Components/AddAppointments.js","Components/Appointment.js","Components/AppointmentList.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","AddAppointments","petNameRef","React","createRef","ownersNameRef","dateRef","hourRef","symptomRef","state","error","createNewAppointment","e","preventDefault","petName","current","value","ownersName","date","hour","symptom","setState","newAppointment","id","uuid","createAppointment","currentTarget","reset","thereError","this","onSubmit","ref","type","placeholder","Component","Appointment","deleteAppointment","info","onClick","AppointmentList","appointmentsList","appointmentList","message","Object","keys","length","map","appointment","key","App","Appointments","filter","AppointmentsLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3ba9ef2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n    return(\n        <header>\n            <h1 className=\"text-center text-white h1 mt-5 mb-5\">\n                {props.title}\n            </h1>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport uuid from 'uuid';\n\nclass AddAppointments extends Component {\n\n    //  refs del formulario\n    petNameRef = React.createRef();\n    ownersNameRef = React.createRef();\n    dateRef = React.createRef();\n    hourRef = React.createRef();\n    symptomRef = React.createRef();\n\n\n    state = { \n        error: false\n     }\n\n\n    createNewAppointment = (e) => {\n        //  prevenir default\n        e.preventDefault();\n\n        //  crear objeto con los datos\n        const petName = this.petNameRef.current.value;\n        const ownersName = this.ownersNameRef.current.value;\n        const date = this.dateRef.current.value;\n        const hour = this.hourRef.current.value;\n        const symptom = this.symptomRef.current.value;\n\n        if (petName === '' || ownersName === '' || date === '' || hour === '' || symptom === '') {\n\n            this.setState({\n                error: true\n            })\n        }\n        else {\n\n            const newAppointment = {\n                id: uuid(),\n                petName,\n                ownersName,\n                date,\n                hour,\n                symptom\n            }\n\n            //  envia el objeto por props al App(padre) para actualizar el state\n            this.props.createAppointment(newAppointment);\n\n            //  reset formulario\n            e.currentTarget.reset();\n\n            //  Eliminando el Error\n            this.setState({\n                error: false\n            });\n        }\n        \n\n\n    }\n\n    render() {\n\n        //  para el Mensaje de Alerta\n        const thereError = this.state.error;\n\n        return (\n\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n\n                    <h2 className=\"card-title text-center text-info mb-5\">Agregar tus citas aquí</h2>\n\n                    <form onSubmit={this.createNewAppointment}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-3 col-lg-2 pr-1\">Nombre Mascota</label>\n                            <div className=\"col-sm-9 col-lg-10 pl\">\n                                <input ref={this.petNameRef} type=\"text\" className=\"form-control\" placeholder=\"Nombre Mascota\" />\n                             </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-3 col-lg-2\">Nombre Dueño:</label>\n                            <div className=\"col-sm-9 col-lg-10\">\n                                <input ref={this.ownersNameRef} type=\"text\" className=\"form-control\" placeholder=\"Nombre Dueño de la Mascota\" />\n                             </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-form-label col-sm-4 col-lg-2\">Fecha:</label>\n                            <div className=\"col-sm-8 col-lg-5 mb-4 mb-lg-0\">\n                                <input ref={this.dateRef} type=\"date\" className=\"form-control\" />\n                            </div>\n\n                            <label className=\"col-form-label col-sm-4 col-lg-1 pl-0 pr-0\">Hora:</label>\n                            <div className=\"col-sm-8 col-lg-4 pl-4\">\n                                <input ref={this.hourRef} type=\"time\" className=\"form-control\" />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row\">\n                            <label className=\"col-form-label col-sm-4 col-lg-2 pr-0\">Sintomas:</label>\n                            <div className=\"col-sm-8 col-lg-10\">\n                                <textarea ref={this.symptomRef} className=\"form-control\"></textarea>\n                            </div>\n                        </div>\n\n                        <div className=\"form-group row justify-content-end\">\n                            <div className=\"col-sm-3\">\n                                <button type=\"submit\" className=\"btn btn-success w-100\">Agregar</button>\n                            </div>                            \n                        </div> \n\n                    </form>\n\n                    {thereError ? <div className=\"alert alert-danger text-center\">¡Todos los campos son Obligatorios!</div> : ''}\n\n                </div>\n                \n            </div>\n\n        )\n    }\n}\n\nexport default AddAppointments;","import React, { Component } from 'react';\n\nclass Appointment extends Component {\n\n    deleteAppointment = () => {        \n        this.props.deleteAppointment(this.props.info.id);       \n    }\n\n    render() {\n\n        const { petName, ownersName, date, hour, symptom } = this.props.info;\n\n        return (\n            <div className=\"media border-bottom mt-3 pb-3\">\n                <div className=\"media-body\">\n                    <h3 className=\"\">{ petName }</h3>\n                    <p className=\"card-text mt-0 mb-0\"><span className=\"font-weight-bold mr-2\">Nombre del Dueño:</span>{ ownersName }</p>\n                    <p className=\"card-text mt-0 mb-0\"><span className=\"font-weight-bold mr-2\">Fecha:</span>{ date }</p>\n                    <p className=\"card-text mt-0 mb-0\"><span className=\"font-weight-bold mr-2\">Hora:</span>{ hour }</p>\n                    <p className=\"card-text mt-0 mb-0\"><span className=\"font-weight-bold mr-2\">Sintomas:</span></p>\n                    <p className=\"card-text\">{ symptom }</p>\n\n                    <button onClick={ this.deleteAppointment } className=\"btn btn-danger\">\n                        Borrar &times;\n                    </button>\n\n                </div>                \n            </div>\n        )\n    }\n\n}\n\nexport default Appointment;","import React, { Component } from 'react';\n\n//  Components\nimport Appointment from './Appointment';\n\nclass AppointmentList extends Component {\n\n    render() {\n\n        //  para validar el mensaje de alerta\n        const appointmentsList = this.props.appointmentList;\n        \n        const message = Object.keys(appointmentsList).length === 0 ? 'No hay Citas' : 'Administra tus citas aquí';\n\n        return(\n            <div className=\"card mt-5\">\n                <div className=\"card-body\">\n                    <h2 className=\"card-title text-center text-info\">{message}</h2>\n\n                    <div className=\"\">\n                        {Object.keys(this.props.appointmentList).map(appointment => (\n                            \n                            <Appointment\n                                key={appointment} //la key del arreglo\n                                info={this.props.appointmentList[appointment]}\n                                deleteAppointment={this.props.deleteAppointment}\n                            />\n\n                        ) )}\n                    </div>\n                    \n                </div>\n\n            </div>\n        )\n\n    }\n}\n\nexport default AppointmentList;","import React, { Component } from 'react';\n\nimport '../css/App.css'\n\n//  Components\nimport Header from './Header';\nimport AddAppointments from './AddAppointments';\nimport AppointmentList from './AppointmentList';\n\nclass App extends Component {\n\n    state = { \n        Appointments: []\n    }\n\n\n    componentDidMount() {\n        const AppointmentsLS = localStorage.getItem('Appointments');\n        if (AppointmentsLS) {\n            this.setState({\n                Appointments: JSON.parse(AppointmentsLS)\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem(\n            'Appointments',\n            JSON.stringify(this.state.Appointments) \n        )\n    }\n\n\n    createAppointment = (newAppointment) => {\n        //  creando copia del state y le pasamos la nueca cita\n        const Appointments = [...this.state.Appointments, newAppointment]\n\n        //  actualizando el state\n        this.setState({\n            Appointments\n        });\n    }\n\n    deleteAppointment = (id) => {\n        //  creando copia del state\n        const currentAppoinment = [...this.state.Appointments];       \n\n        //  borrar elemento del state\n        const Appointments = currentAppoinment.filter( Appointments => Appointments.id !== id );\n\n        //  actualizar el state\n        this.setState({\n            Appointments\n        });\n    }\n\n    render () {\n\n        return (\n            <div className=\"container\">\n                <Header title='Administrador de Pasientes de Veterinario' />\n\n                <div className=\"row\">\n\n                    <div className=\"col-sm-6 col-md-6\">\n                        <AddAppointments \n                            createAppointment={this.createAppointment}\n                        /> \n                    </div>\n\n                    <div className=\"col-sm-6 col-md-6\">\n                        <AppointmentList \n                            appointmentList={this.state.Appointments}\n                            deleteAppointment={this.deleteAppointment}\n                        />\n                    </div>\n                   \n\n                </div>                \n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/App.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}